plugins {
    id "org.springframework.boot" version "2.7.5"
//    id "org.springframework.cloud.contract" version "3.0.3"
    id "io.spring.dependency-management" version "1.1.0"
    id "java"
//    id "au.com.dius.pact" version "4.1.7"
}

group = "ddd-by-example"
version = "0.0.1-SNAPSHOT"
sourceCompatibility = "1.17"
targetCompatibility = "1.17"

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/milestone" }
}

dependencies {
    //Spring
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.kafka:spring-kafka"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "io.micrometer:micrometer-core:1.10.0"
    implementation "io.micrometer:micrometer-registry-prometheus"
    implementation "io.github.resilience4j:resilience4j-retry:1.7.1"
    implementation "org.hibernate:hibernate-validator:8.0.0.Final"
    implementation "com.vladmihalcea:hibernate-types-52:2.20.0"
    implementation "com.zaxxer:HikariCP:5.0.1"

    runtimeOnly "org.postgresql:postgresql:42.5.0"

    //Lombok
    compileOnly "org.projectlombok:lombok:1.18.24"
    annotationProcessor "org.projectlombok:lombok:1.18.24"

    //Kafka
    implementation "org.springframework.kafka:spring-kafka"
    implementation "org.apache.kafka:kafka-streams"

    //Tests
    testImplementation "org.springframework.boot:spring-boot-starter-test"

    //Swagger
    implementation "io.swagger:swagger-core:1.6.8"
    implementation "io.springfox:springfox-swagger2:3.0.0"
    testImplementation "io.swagger:swagger-parser:1.0.63"

    testImplementation "org.testcontainers:testcontainers:1.17.4"
    testImplementation "org.testcontainers:kafka:1.17.4"
    testImplementation "org.testcontainers:postgresql:1.17.4"
    testImplementation "org.awaitility:awaitility:4.2.0"
    testImplementation "au.com.dius.pact.consumer:junit5:4.3.16"
    testImplementation "au.com.dius.pact.provider:junit5spring:4.3.16"
    testImplementation "org.skyscreamer:jsonassert:1.5.1"
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.springframework.cloud:spring-cloud-starter-contract-verifier:3.1.5"
    testImplementation "com.tngtech.archunit:archunit-junit5:1.0.1"
    testCompileOnly "org.projectlombok:lombok:1.18.24"
    testAnnotationProcessor "org.projectlombok:lombok:1.18.24"
}

test {
    useJUnitPlatform()
}

//contracts {
//    testFramework = "JUNIT5"
//
//    basePackageForTests = "devices.configuration"
//    baseClassMappings {
//        baseClassMapping(".*config.*", "devices.configuration.configs.ContractTestingBase")
//    }
//}
//
//contractTest {
//    useJUnitPlatform()
//    testLogging {
//        exceptionFormat = 'full'
//    }
//}

//pact {
//    publish {
//        pactBrokerUrl = 'pact.broker.url'
//    }
//}

compileJava {
    options.incremental = true
    options.compilerArgs << "--enable-preview"
    options.compilerArgs << "-parameters"
    options.compilerArgs << "-Xlint:unchecked"
}

compileTestJava {
    options.incremental = true
    options.compilerArgs << "--enable-preview"
    options.compilerArgs << "-parameters"
    options.compilerArgs << "-Xlint:unchecked"
}

// This prepares an empty dir with our jar for a docker image. Useful for the dockerfile, not to read any unnecessary files into the image

task copyJar(type: Copy) {
    from bootJar // here it automatically reads jar file produced from bootJar task
    into "${buildDir}/docker/"
}
build.dependsOn copyJar
